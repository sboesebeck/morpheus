package de.caluga.morpheus;


import ch.qos.logback.classic.LoggerContext;
import ch.qos.logback.classic.joran.JoranConfigurator;
import ch.qos.logback.core.joran.spi.JoranException;
import de.caluga.morphium.Morphium;
import de.caluga.morphium.MorphiumConfig;
import de.caluga.morphium.driver.inmem.InMemoryDriver;
import de.caluga.morphium.messaging.Messaging;
import de.caluga.morphium.messaging.Msg;
import org.junit.AfterClass;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.event.EventListener;
import org.springframework.core.env.Environment;

import javax.annotation.PostConstruct;
import javax.swing.text.IconView;
import java.io.*;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.*;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

import static de.caluga.morphium.MorphiumConfig.fromProperties;

@SpringBootApplication
public class Application {

    @Autowired
    Environment environment;

    private List<ErrorEntry> errors=new ArrayList<>();

    private Map<String,Morphium> connections=new HashMap<>();

    private ScheduledExecutorService scheduledExecutorService=new ScheduledThreadPoolExecutor(2);

    @Value("${server.port:8080}")
    private String serverPort;

    private final Logger log = LoggerFactory.getLogger(Application.class);

    public static void main(String[] args){
        configureLogger();
        ASCIIArt artGen = new ASCIIArt();
        artGen.printTextArt("Morpheus", ASCIIArt.ART_SIZE_HUGE, ASCIIArt.ASCIIArtFont.ART_FONT_SANS_SERIF, "*");
        SpringApplication.run(Application.class);
    }


    private static void configureLogger() {
        LoggerContext context = (LoggerContext) LoggerFactory.getILoggerFactory();
        try {
            JoranConfigurator configurator = new JoranConfigurator();
            configurator.setContext(context);
            context.reset();
            ClassLoader classloader = Thread.currentThread().getContextClassLoader();
            InputStream is = classloader.getResourceAsStream("logback-morpheus.xml");
            configurator.doConfigure(is);
        } catch (JoranException je) {
            LoggerFactory.getLogger(Application.class).warn("Can not configure logger. Continue to execute the command.", je);
            je.printStackTrace();
            System.exit(1);
        }
    }


    public Properties readSettings() throws IOException {
        Properties p=new Properties();
        File f=new File(System.getenv("HOME")+ File.separator+".morpheus.ini");
        if (f.exists()){
            p.load(new FileReader(f));
        }
        return p;
    }

    public void addError(String txt){
        errors.add(new ErrorEntry(new Date(),txt));
    }

    public List<ErrorEntry> getErrors(){
        return errors;
    }


    public void removeError(int idx){
        errors.remove(idx);
    }

    public  Map<Integer,Properties> getSettingsList() throws IOException {
        int count=0;
        Properties p=readSettings();
        Map<Integer,Properties> ret=new HashMap<>();
        while(true){
            count++;
            String prefix = "morpheus." + count;
            if (!p.containsKey(prefix+ ".database")){
                break;
            }
            Properties sp=new Properties();
            for (String n:p.stringPropertyNames()){
                if (n.startsWith(prefix)){
                    sp.setProperty(n,p.getProperty(n));
                }
            }
            ret.put(count,sp);

        }
        return ret;
    }

    public void storeSettings(Properties p) throws IOException{
        File f=new File(System.getenv("HOME")+ File.separator+".morpheus.ini");
        p.store(new FileWriter(f),"generated by MORPHEUS");
    }


    @EventListener(ApplicationReadyEvent.class)
    public void doSomethingAfterStartup() throws IOException {
        log.info("hello world, I have just started up");
        scheduledExecutorService.scheduleWithFixedDelay(()->{
            List<ErrorEntry> localCopy=new ArrayList<>(errors);
            for (ErrorEntry e:localCopy){
                if (System.currentTimeMillis()-e.timeStamp.getTime()>60*1000){
                    errors.remove(e);
                }
            }
        },1000,1000, TimeUnit.MILLISECONDS);

    }


    public static class ErrorEntry {
        public ErrorEntry(Date timeStamp, String text) {
            this.timeStamp = timeStamp;
            this.text = text;
        }

        public Date timeStamp;
        public String text;
//        public String user;


        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof ErrorEntry)) return false;
            ErrorEntry that = (ErrorEntry) o;
            return Objects.equals(timeStamp, that.timeStamp) && Objects.equals(text, that.text);
        }

        @Override
        public int hashCode() {
            return Objects.hash(timeStamp, text);
        }
    }
}
